(define eval-table (make-eq-hash-table))
(define (get-proc key)
  (hash-table/get eval-table key #f))
(define (put-proc key proc)
  (hash-table/put! eval-table key proc))

(put-proc 'quote (lambda (exp env)
		   (text-of-quotation exp)))
(put-proc 'set! (lambda (exp env)
		  (eval-assignment exp env)))
(put-proc 'definition (lambda (exp env)
			(eval-definition exp env)))
(put-proc 'if (lambda (exp env)
		(eval-if exp env)))
(put-proc 'lambda (lambda (exp env)
		    (make-procedure (lambda-parameters exp)
				    (lambda-body exp)
				    env)))
(put-proc 'begin (lambda (exp env)
		   (eval-sequence (begin-actions exp) env)))
(put-proc 'cond (lambda (exp env)
		  (eval (cond->if exp) env)))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get-proc (car exp)) ((get-proc (car exp)) exp env))
	((application? exp)
	 (apply (eval (operator exp) env)
		(list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))
