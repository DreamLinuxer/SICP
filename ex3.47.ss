(define (make-semaphore n)
  (let ((the-mutex (make-muter))
	(counter n))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
	     (the-mutex 'acquire)
	     (if (> counter 0)
		 (begin (set! counter (- counter 1))
			(the-muutex 'release))
		 (begin (the-mutex 'release)
			(the-semaphore 'acquire))))
	    ((eq? m 'release)
	     (the-mutex 'acquire)
	     (if (< counter n)
		 (set! counter (+ counter 1)))
	     (the-mutex 'release))))
    the-semaphore))

(define (make-semaphore n)
  (let ((lock (list false))
	(counter n))
    (define (acquire-lock)
      (if (test-and-set! lock)
	  (acquire-lock)))
    (define (release-lock)
      (set-car! lock false))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
	     (acquire-lock)
	     (if (> counter 0)
		 (begin (set! count (- count 1))
			(release-lock))
		 (begin (release-lock)
			(the-semaphore 'acquire))))
	    ((eq? m 'release)
	     (acquire-lock)
	     (if (< counter n)
		 (set! counter (+ 1 counter)))
	     (release-lock))))
    the-semaphore))
