(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((let? exp) (eval (let->combination exp) env))
	((let*? exp) (eval (let*->nested-lets) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (let? exp) (tagged-list? exp 'let))
(define (let-binding exp) (cadr exp))
(define (let-body exp) (cddr exp))
(define (let-var binding)
  (if (null? binding) '()
      (cons (caar binding)
	    (let-var (cdr binding)))))
(define (let-exp binding)
  (if (null? binding) '()
      (cons (cadar binding)
	    (let-exp (cdr binding)))))
(define (let->combination exp)
  (list (make-lambda (let-var (let-binding exp))
		     (let-body exp))
	(let-exp (let-binding exp))))

(define (let*? exp) (tagged-list? exp 'let*))
(define (let*-binding exp) (cadr exp))
(define (let*-body exp) (cddr exp))
(define (expand-lets binding body)
  (if (null? (cdr binding))
      (list 'let (list (car binding) body))
      (list 'let (list (car binding)
			(expand-lets (cdr binding) body)))))
(define (let*->nested-lets exp)
  (expand-lets (let*-binding exp) (let*-body exp)))

(let*->nested-lets (list 'let* (list '(x 1) '(y (+ x 1))) '(+ x y)))

