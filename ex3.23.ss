(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (data p) (car p))
(define (prev-ptr p) (cadr p))
(define (next-ptr p) (cddr p))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (set-prev-ptr! p q) (set-car! (cdr p) q))
(define (set-next-ptr! p q) (set-cdr! (cdr p) q))

(define (empty-deque? queue) (null? (front-ptr queue)))
(define (make-deque) (cons '() '()))

(define (front-deque queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (data (front-ptr queue))))

(define (rear-deque queue)
  (if (empty-queue? queue)
      (error "REAR called with an empty queue" queue)
      (data (rear-ptr queue))))

(define (front-insert-deque! queue item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-deque? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
	   (set-next-ptr! new-pair (front-ptr queue))
           (set-prev-ptr! (front-ptr queue) new-pair)
	   (set-front-ptr! queue new-pair)
           queue))))

(define (rear-insert-deque! queue item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-deque? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
	   (set-prev-ptr! new-pair (rear-ptr queue))
           (set-next-ptr! (rear-ptr queue) new-pair)
	   (set-rear-ptr! queue new-pair)
           queue))))

(define (front-delete-deque! queue)
  (cond ((empty-deque? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (next-ptr (front-ptr queue)))
	 (if (null? (front-ptr queue))
	     (set-rear-ptr! queue '())
	     (set-prev-ptr! (front-ptr queue) '()))
         queue)))

(define (rear-delete-deque! queue)
  (cond ((empty-deque? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-rear-ptr! queue (prev-ptr (rear-ptr queue)))
	 (if (null? (rear-ptr queue))
	     (set-front-ptr! queue '())
	     (set-next-ptr! (rear-ptr queue) '()))
         queue)))

(define (print-deque q)
  (define (iter p L)
    (if (null? p)
	(begin (newline)
	       (display L))
	(iter (next-ptr p) (append L (list (data p))))))
  (iter (front-ptr q) '()))

(define q1 (make-deque))
(print-deque q1)
(empty-deque? q1)

(print-deque (front-insert-deque! q1 'a))
(print-deque (front-insert-deque! q1 'b))
(print-deque (rear-insert-deque! q1 'c))
(print-deque (rear-insert-deque! q1 'd))
(print-deque (front-delete-deque! q1))
(print-deque (rear-delete-deque! q1))
(empty-deque? q1)
(print-deque (rear-delete-deque! q1))
(print-deque (front-delete-deque! q1))
(empty-deque? q1)

