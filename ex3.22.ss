(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    
    (define (front-queue)
      (if (empty-queue?)
	  (error "FRONT called with an empty queue")
	  (car front-ptr)))

    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set! front-ptr new-pair)
	       (set! rear-ptr new-pair)
	       dispatch)
	      (else
	       (set-cdr! rear-ptr new-pair)
	       (set! rear-ptr new-pair)
	       dispatch))))
    
    (define (delete-queue!)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue"))
	    (else
	     (set! front-ptr (cdr front-ptr))
	     dispatch)))
    (define (dispatch m)
      (cond ((eq? m 'empty?) empty-queue?)
	    ((eq? m 'front) front-queue)
	    ((eq? m 'insert!) insert-queue!)
	    ((eq? m 'delete!) delete-queue!)
	    ((eq? m 'front-ptr) (lambda () front-ptr))
	    ((eq? m 'rear-ptr) (lambda () rear-ptr))
	    (else (error "unknown message" m))))
    dispatch))

(define (empty-queue? queue) ((queue 'empty?)))
(define (front-queue queue) ((queue 'front)))
(define (insert-queue! queue item) ((queue 'insert!) item))
(define (delete-queue! queue) ((queue 'delete!)))
(define (front-ptr queue) ((queue 'front-ptr)))
(define (rear-ptr queue) ((queue 'rear-ptr)))

(define (print-queue q)
  (newline)
  (display (front-ptr q)))

(define q1 (make-queue))
(empty-queue? q1)
(print-queue q1)

(print-queue (insert-queue! q1 'a))
(front-queue q1)
(empty-queue? q1)
(print-queue (insert-queue! q1 'b))
(print-queue (delete-queue! q1))
(print-queue (delete-queue! q1))
(empty-queue? q1)
