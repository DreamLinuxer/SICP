(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((let? exp) (eval (let->combination exp) env))
	((let*? exp) (eval (let*->nested-lets) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

(define (variable? exp) (symbol? exp))

(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (let? exp) (tagged-list? exp 'let))
(define (let-assignment exp) (cadr exp))
(define (let-body exp) (cddr exp))
(define (let-var assignment)
  (if (null? assignment) '()
      (cons (caar assignment)
	    (let-var (cdr assignment)))))
(define (let-exp assignment)
  (if (null? assignment) '()
      (cons (cadar assignment)
	    (let-exp (cdr assignment)))))
(define (let->combination exp)
  (if (named-let? exp)
      (named-let->combination exp)
      (list (make-lambda (let-var (let-assignment exp))
			 (let-body exp))
	    (let-exp (let-assignment exp)))))

(define (let*? exp) (tagged-list? exp 'let*))
(define (let*-assignment exp) (cadr exp))
(define (let*-body exp) (cddr exp))
(define (expand-lets assignment body)
  (if (null? (cdr assignment))
      (list 'let (list (car assignment) body))
      (list 'let (list (car assignment)
			(expand-lets (cdr assignment) body)))))
(define (let*->nested-lets exp)
  (expand-lets (let*-assignment exp) (let*-body exp)))

(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))

(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))

(define (make-begin seq) (cons 'begin seq))

(define (named-let? exp) (and (let? exp) (variable? (cadr exp))))
(define (named-let-name exp) (cadr exp))
(define (named-let-binding exp) (caddr exp))
(define (named-let-body exp) (cadddr exp))
(define (named-let->combination exp)
  (let ((name (named-let-name exp))
	(binding (named-let-binding exp))
	(body (named-let-body exp)))
    (sequence->exp (list (list 'define
			       (cons name
				     (let-var binding))
			       body)
			 (cons name (let-exp binding))))))

(let->combination
 (list 'let 'fib-iter (list '(a 1) '(b 0) '(count n))
       '(if (= count 0) b (fib-iter (+ a b) a (- count 1)))))

